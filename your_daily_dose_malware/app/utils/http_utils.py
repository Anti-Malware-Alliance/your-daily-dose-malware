from enum import Enum

import requests
from requests.exceptions import HTTPError, RequestException


class HttpMethod(Enum):
    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    DELETE = "DELETE"


class HttpUtilsException(Exception):
    """Custom exception class for HTTP utility errors."""

    def __init__(self, message, status_code=None):
        super().__init__(message)
        self.status_code = status_code


class HttpUtils:
    @staticmethod
    def get(url, headers=None, params=None, timeout=10):
        return HttpUtils._make_request(
            HttpMethod.GET, url, headers=headers, params=params,
            timeout=timeout
        )

    @staticmethod
    def post(url, headers=None, params=None, data=None, json=None, timeout=10):
        return HttpUtils._make_request(
            HttpMethod.POST,
            url,
            headers=headers,
            params=params,
            data=data,
            json=json,
            timeout=timeout,
        )

    @staticmethod
    def put(url, headers=None, params=None, data=None, json=None, timeout=10):
        return HttpUtils._make_request(
            HttpMethod.PUT,
            url,
            headers=headers,
            params=params,
            data=data,
            json=json,
            timeout=timeout,
        )

    @staticmethod
    def delete(url, headers=None, params=None, data=None, json=None,
               timeout=10):
        return HttpUtils._make_request(
            HttpMethod.DELETE,
            url,
            headers=headers,
            params=params,
            data=data,
            json=json,
            timeout=timeout,
        )

    @staticmethod
    def _make_request(
        method, url, headers=None, params=None, data=None, json=None,
            timeout=10):
        try:
            response = requests.request(
                method=method,
                url=url,
                headers=headers,
                params=params,
                data=data,
                json=json,
                timeout=timeout,
            )

            response.raise_for_status()
            try:
                return response.json()
            except ValueError:
                return response.text
        except HTTPError as http_err:
            raise HttpUtilsException(
                f"HTTP error occurred: {http_err}",
                status_code=http_err.response.status_code,
            )
        except RequestException as req_err:
            raise HttpUtilsException(f"Request error occurred: {req_err}")
        except Exception as err:
            raise HttpUtilsException(f"An unexpected error occurred: {err}")
