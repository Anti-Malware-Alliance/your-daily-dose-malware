import os
from datetime import datetime as dt
from pathlib import Path

import requests
import rich
from dotenv import load_dotenv
from rich.progress import Progress

load_dotenv()


def scrap_malshare():
    """List hashes from the past 24 hours
    """
    with Progress() as progress:
        api_key = os.getenv("MALSHARE_API_KEY")
        if api_key == "":
            rich.print("[red]Please set MALSHARE_API_KEY ")
            return None
        try:
            response = requests.post(
                "https://malshare.com/api.php",
                verify=True,
                params={"api_key": api_key, "action": "getlist"},
            )
            response.raise_for_status()
            hashes = response.json()
        except requests.RequestException as err:
            rich.print(f"[red] An error occurred: {err}")
            return None
        rich.print(f"[green]  - Malshare: {len(hashes)} Samples")
        sha256_ids = [hashe["sha256"] for hashe in hashes]
        task = progress.add_task(
            "-[green]Downloading Malware Files...", total=len(sha256_ids)
        )
        Path("Downloaded-Malwares").mkdir(exist_ok=True)
        downloaded_malwares_path = Path("Downloaded-Malwares").absolute()
        for sha256_id in sha256_ids:
            if (downloaded_malwares_path / f"malware_{sha256_id[:6]}.zip").exists():
                progress.update(task, advance=1)
                continue
            try:
                response = requests.post(
                    "https://malshare.com/api.php",
                    params={"api_key": api_key, "action": "getfile", "hash": sha256_id},
                    verify=True,
                )
                response.raise_for_status()
            except requests.RequestException as err:
                raise err
            curr_time = dt.now().date().strftime("%Y-%m-%d")
            if response.status_code == 502:
                json_response = response.json()
                if json_response["query_status"] == "file_not_found":
                    rich.print(f"	[red]sha256_hash: {sha256_id[:6]} not found skipping")
                    continue
                if json_response["query_status"] == "illegal_sha256_hash":
                    rich.print(f"	[red]Illegal SHA256 hash provided: {sha256_id[:6]} skipping")
                    continue
            file_path = f"malware_{sha256_id[:6]}_{curr_time}.zip"
            final_path = (downloaded_malwares_path/file_path)
            with open(file=final_path, mode="wb") as f:
                f.write(response.content)
                progress.update(task, advance=1)


if __name__ == "__main__":
    scrap_malshare()
