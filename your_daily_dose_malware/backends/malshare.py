import os
from datetime import datetime as dt
from pathlib import Path

import requests
import rich
from dotenv import load_dotenv
from rich.progress import Progress

load_dotenv()


def scrap_malshare():
    """List hashes from the past 24 hours
    """
    with Progress() as progress:
        api_key = os.getenv("MALSHARE_API_KEY")
        if api_key == "":
            rich.print("[green]Skipping Malshare not api key")
            return None
        try:
            response = requests.post(
                "https://malshare.com/api.php",
                verify=True,
                params={"api_key": api_key, "action": "getlist"},
            )
            response.raise_for_status()
            hashes = response.json()
        except Exception as err:
            raise err
        try:
            print(f"  - Malshare: {len(hashes)} Samples")
            sha256_ids = [hashe["sha256"] for hashe in hashes]
            task = progress.add_task(
                "  - [green]Downloading Malware Files...", total=len(sha256_ids)
            )
            rich.print(f"	Your query yield {len(sha256_ids)} results")
            Path("Downloaded-Malwares").mkdir(exist_ok=True)
            downloaded_malwares_path = Path("Downloaded-Malwares").absolute()
            for sha256_id in sha256_ids:
                if (downloaded_malwares_path / f"malware_{sha256_id[:6]}.zip").exists():
                    progress.update(task, advance=1)
                    continue
                response = requests.post(
                    "https://malshare.com/api.php",
                    params={"api_key": api_key, "action": "getfile", "hash": sha256_id},
                    verify=True,
                )
                response.raise_for_status()
                curr_time = dt.now().date().strftime("%Y-%m-%d")
                if response.status_code == 502:
                    json_response = response.json()
                    if json_response["query_status"] == "file_not_found":
                        rich.print(f"	[red]sha256_hash: {sha256_id[:6]} not found skipping")
                        continue
                    if json_response["query_status"] == "illegal_sha256_hash":
                        rich.print(f"	[red]Illegal SHA256 hash provided: {sha256_id[:6]} skipping")
                        continue
                with open(file=(downloaded_malwares_path/f"malware_{sha256_id[:6]}_{curr_time}.zip"), mode="wb") as f:
                    f.write(response.content)
                progress.update(task, advance=1)
        except Exception as err:
            raise err


if __name__ == "__main__":
    scrap_malshare()
