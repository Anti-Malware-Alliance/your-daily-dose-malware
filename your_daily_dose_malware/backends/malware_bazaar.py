import os
from datetime import datetime as dt
from pathlib import Path

import requests
import rich
from rich.progress import Progress
import typer

API_KEY = os.getenv("MALSHARE_API_KEY")


class MalwareBazaar:
    @classmethod
    def hundred_most_recent(cls, headers_info):
        with Progress() as progress:
            # TODO Pending Refactor this method to match all_most_recent style
            response = requests.post(
                "https://mb-api.abuse.ch/api/v1/",
                data={"query": "get_recent", "selector": "100"},
                headers=headers_info,
            )
            json_response = response.json()

            if json_response["query_status"] == "no_selector":
                rich.print(
                    "[red]No selector provided. Please use either time or limit as selector",
                )
            if json_response["query_status"] == "unknown_selector":
                rich.print(
                    "[red]Selector unknown. Please use either time or limit as selector"
                )
                return
            if json_response["query_status"] == "no_results":
                rich.print("[red]Your query yield no results")
                return
            else:
                data_length = len(json_response["data"])
                rich.print(f"[green]Your query yield {data_length} results")
                Path("Downloaded-Malwares").mkdir(exist_ok=True)
                downloaded_malwares_path = Path("Downloaded-Malwares")
                curr_time = dt.now().date().strftime("%Y-%m-%d")
                task = progress.add_task(
                    "  - [green]Downloading Malware Files...",
                    total=len(json_response["data"]),
                )
                for data in json_response["data"]:
                    sha256_name = data["sha256_hash"]
                    file_path = f"malware_{sha256_name[:6]}_{curr_time}.zip"
                    if (downloaded_malwares_path / file_path).exists():
                        progress.update(task, advance=1)
                        continue
                    response = requests.post(
                        "https://mb-api.abuse.ch/api/v1/",
                        data={"query": "get_file", "sha256_hash": sha256_name},
                        headers=headers_info,
                    )
                    file_path = f"malware_{sha256_name[:6]}_{curr_time}.zip"
                    path = downloaded_malwares_path / file_path
                    with open(path.absolute(), "wb+") as f:
                        f.write(response.content)
                    progress.update(task, advance=1)

    @classmethod
    def get_new_hashes(cls, malware_response: requests.Response):
        with open("sha256_names.txt", "wb+") as f:
            f.write(malware_response.content)
            f.seek(0)
            new_hashes = list()
            file_lines = [line.strip() for line in f.readlines()]
            for index, line in enumerate(file_lines, start=0):
                # skip the first 9 lines and last line
                if 8 < index < len(file_lines) - 1:
                    new_hashes.append(line)
                continue
        return new_hashes
        ...

    @classmethod
    def all_most_recent(cls, headers_info):
        with Progress() as progress:
            response = requests.post(
                "https://bazaar.abuse.ch/export/txt/sha256/recent", headers=headers_info
            )
            new_hashes = cls.get_new_hashes(malware_response=response)
            rich.print(f"- [green]Malware Bazaar: {len(new_hashes)} Samples")

            with open("sha256_names.txt", "w") as f:
                for line in new_hashes:
                    f.write(line.decode("utf-8") + "\n")
            sha256_hashes = open("sha256_names.txt", "r").readlines()
            print(sha256_hashes)
            Path("sha256_names.txt").unlink()
            task = progress.add_task("  - [green]Downloading Malware Files...")
            Path("Downloaded-Malwares").mkdir(exist_ok=True)
            for sha256_hash in sha256_hashes:
                curr_time = dt.now().date().strftime("%Y-%m-%d")
                downloaded_malwares_path = Path("Downloaded-Malwares").absolute()
                file_path = f"malware_{sha256_hash[:6]}_{curr_time}.zip"
                if (downloaded_malwares_path / file_path).exists():
                    progress.update(task, advance=100 / len(sha256_hashes))
                    continue
                response = requests.post(
                    "https://mb-api.abuse.ch/api/v1/",
                    params={"query": "get_file", "sha256_hash": sha256_hash},
                    headers=headers_info,
                )
                if response.status_code == 502:
                    json_response = response.json()
                    if json_response["query_status"] == "file_not_found":
                        rich.print(
                            f"	[red]sha256_hash: {sha256_hash[:6]} not found skipping"
                        )
                        progress.update(task, advance=1)
                        continue
                    if json_response["query_status"] == "illegal_sha256_hash":
                        rich.print(
                            f"	[red]Illegal SHA256 hash provided: {sha256_hash[:6]} skipping"
                        )
                        progress.update(task, advance=1)
                        continue
                targeted_file = f"malware_{sha256_hash[:6]}_{curr_time}.zip"
                final_path = downloaded_malwares_path / targeted_file
                with open(final_path, "wb") as f:
                    f.write(response.content)
                progress.update(task, advance=1)

    @classmethod
    def scrap_malware_bazaar(cls, hundred_recent: bool = False):
        if API_KEY == "":
            rich.print("[red]Please set  MALWARE_BAZAAR_API_KEY")
            return None
        headers = {"API-KEY": API_KEY}
        if hundred_recent:
            cls.hundred_most_recent(headers)
            return typer.Exit(code=1)
        else:
            cls.all_most_recent(headers)
            return typer.Exit(code=1)
