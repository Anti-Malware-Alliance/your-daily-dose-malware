import os
import argparse
from rich.console import Console
from your_daily_dose_malware.commands.utils.retrieve_malware import (all_most_recent,
                                                                     hundred_most_recent)
from dotenv import load_dotenv


load_dotenv()


def scrap_malware_bazaar(hundred_recent):
    headers = {"API-KEY": os.getenv("MwBz_API_KEY")}
    if hundred_recent:
        hundred_most_recent(headers)
    else:
        all_most_recent(headers)


def run_scrapper(args):
    scrap_malware_bazaar(args.hundred_recent)


def main():

    parser = argparse.ArgumentParser(
        description="Download recent samples from multiple OSINT provider backends"
                    "MalwareBazaar: all the recent recent malware's uploaded within the last 48 hours sha256 hash"
                    "MalwareBazaar: By using api from 'https://mb-api.abuse.ch/api/v1/'"
    )
    parser.add_argument('-MwBz_48H', '--last-48H', action='store_true',
                        help="get the most recent sha256 hashes", default=True)
    parser.add_argument('-MwBz_100', '--hundred-recent', action='store_true',
                        help="get the most recent hundred recent malware's uploaded within the last 60 min")
    args = parser.parse_args()

    console = Console()
    console.print("\n[green]   ██████   █████  ██ ██      ██    ██      ███    ███  █████  ██      ██     ██  █████  ██████  ███████[/green]\n"
          "[green]   ██   ██ ██   ██ ██ ██       ██  ██       ████  ████ ██   ██ ██      ██     ██ ██   ██ ██   ██ ██     [/green]\n"
          "[green]   ██   ██ ███████ ██ ██        ████        ██ ████ ██ ███████ ██      ██  █  ██ ███████ ██████  █████  [/green]\n"
          "[green]   ██   ██ ██   ██ ██ ██         ██         ██  ██  ██ ██   ██ ██      ██ ███ ██ ██   ██ ██   ██ ██     [/green]\n"
          "[green]   ██████  ██   ██ ██ ███████    ██         ██      ██ ██   ██ ███████  ███ ███  ██   ██ ██   ██ ███████[/green]\n")
    console.print("Downloads Fresh Malware Samples \n")

    run_scrapper(args)


if __name__ == "__main__":
    main()
